// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiNowTableTableName request
	GetApiNowTableTableName(ctx context.Context, tableName interface{}, params *GetApiNowTableTableNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiNowTableTableNameWithBody request with any body
	PostApiNowTableTableNameWithBody(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiNowTableTableName(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, body PostApiNowTableTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiNowTableTableNameSysId request
	DeleteApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *DeleteApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNowTableTableNameSysId request
	GetApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *GetApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiNowTableTableNameSysIdWithBody request with any body
	PatchApiNowTableTableNameSysIdWithBody(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, body PatchApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiNowTableTableNameSysIdWithBody request with any body
	PutApiNowTableTableNameSysIdWithBody(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, body PutApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiNowTableTableName(ctx context.Context, tableName interface{}, params *GetApiNowTableTableNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNowTableTableNameRequest(c.Server, tableName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNowTableTableNameWithBody(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNowTableTableNameRequestWithBody(c.Server, tableName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNowTableTableName(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, body PostApiNowTableTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNowTableTableNameRequest(c.Server, tableName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *DeleteApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiNowTableTableNameSysIdRequest(c.Server, tableName, sysId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *GetApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNowTableTableNameSysIdRequest(c.Server, tableName, sysId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiNowTableTableNameSysIdWithBody(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiNowTableTableNameSysIdRequestWithBody(c.Server, tableName, sysId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, body PatchApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiNowTableTableNameSysIdRequest(c.Server, tableName, sysId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiNowTableTableNameSysIdWithBody(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiNowTableTableNameSysIdRequestWithBody(c.Server, tableName, sysId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiNowTableTableNameSysId(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, body PutApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiNowTableTableNameSysIdRequest(c.Server, tableName, sysId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiNowTableTableNameRequest generates requests for GetApiNowTableTableName
func NewGetApiNowTableTableNameRequest(server string, tableName interface{}, params *GetApiNowTableTableNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query", runtime.ParamLocationQuery, *params.SysparmQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_display_value", runtime.ParamLocationQuery, *params.SysparmDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmExcludeReferenceLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_exclude_reference_link", runtime.ParamLocationQuery, *params.SysparmExcludeReferenceLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmSuppressPaginationHeader != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_suppress_pagination_header", runtime.ParamLocationQuery, *params.SysparmSuppressPaginationHeader); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_fields", runtime.ParamLocationQuery, *params.SysparmFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_limit", runtime.ParamLocationQuery, *params.SysparmLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_view", runtime.ParamLocationQuery, *params.SysparmView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmQueryCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_category", runtime.ParamLocationQuery, *params.SysparmQueryCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmQueryNoDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_no_domain", runtime.ParamLocationQuery, *params.SysparmQueryNoDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmNoCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_no_count", runtime.ParamLocationQuery, *params.SysparmNoCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiNowTableTableNameRequest calls the generic PostApiNowTableTableName builder with application/json body
func NewPostApiNowTableTableNameRequest(server string, tableName interface{}, params *PostApiNowTableTableNameParams, body PostApiNowTableTableNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiNowTableTableNameRequestWithBody(server, tableName, params, "application/json", bodyReader)
}

// NewPostApiNowTableTableNameRequestWithBody generates requests for PostApiNowTableTableName with any type of body
func NewPostApiNowTableTableNameRequestWithBody(server string, tableName interface{}, params *PostApiNowTableTableNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_display_value", runtime.ParamLocationQuery, *params.SysparmDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmExcludeReferenceLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_exclude_reference_link", runtime.ParamLocationQuery, *params.SysparmExcludeReferenceLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_fields", runtime.ParamLocationQuery, *params.SysparmFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmInputDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_input_display_value", runtime.ParamLocationQuery, *params.SysparmInputDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmSuppressAutoSysField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_suppress_auto_sys_field", runtime.ParamLocationQuery, *params.SysparmSuppressAutoSysField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_view", runtime.ParamLocationQuery, *params.SysparmView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiNowTableTableNameSysIdRequest generates requests for DeleteApiNowTableTableNameSysId
func NewDeleteApiNowTableTableNameSysIdRequest(server string, tableName interface{}, sysId interface{}, params *DeleteApiNowTableTableNameSysIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sys_id", runtime.ParamLocationPath, sysId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmQueryNoDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_no_domain", runtime.ParamLocationQuery, *params.SysparmQueryNoDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNowTableTableNameSysIdRequest generates requests for GetApiNowTableTableNameSysId
func NewGetApiNowTableTableNameSysIdRequest(server string, tableName interface{}, sysId interface{}, params *GetApiNowTableTableNameSysIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sys_id", runtime.ParamLocationPath, sysId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_display_value", runtime.ParamLocationQuery, *params.SysparmDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmExcludeReferenceLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_exclude_reference_link", runtime.ParamLocationQuery, *params.SysparmExcludeReferenceLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_fields", runtime.ParamLocationQuery, *params.SysparmFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_view", runtime.ParamLocationQuery, *params.SysparmView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmQueryNoDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_no_domain", runtime.ParamLocationQuery, *params.SysparmQueryNoDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiNowTableTableNameSysIdRequest calls the generic PatchApiNowTableTableNameSysId builder with application/json body
func NewPatchApiNowTableTableNameSysIdRequest(server string, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, body PatchApiNowTableTableNameSysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiNowTableTableNameSysIdRequestWithBody(server, tableName, sysId, params, "application/json", bodyReader)
}

// NewPatchApiNowTableTableNameSysIdRequestWithBody generates requests for PatchApiNowTableTableNameSysId with any type of body
func NewPatchApiNowTableTableNameSysIdRequestWithBody(server string, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sys_id", runtime.ParamLocationPath, sysId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_display_value", runtime.ParamLocationQuery, *params.SysparmDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmExcludeReferenceLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_exclude_reference_link", runtime.ParamLocationQuery, *params.SysparmExcludeReferenceLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_fields", runtime.ParamLocationQuery, *params.SysparmFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmInputDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_input_display_value", runtime.ParamLocationQuery, *params.SysparmInputDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmSuppressAutoSysField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_suppress_auto_sys_field", runtime.ParamLocationQuery, *params.SysparmSuppressAutoSysField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_view", runtime.ParamLocationQuery, *params.SysparmView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmQueryNoDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_no_domain", runtime.ParamLocationQuery, *params.SysparmQueryNoDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiNowTableTableNameSysIdRequest calls the generic PutApiNowTableTableNameSysId builder with application/json body
func NewPutApiNowTableTableNameSysIdRequest(server string, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, body PutApiNowTableTableNameSysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiNowTableTableNameSysIdRequestWithBody(server, tableName, sysId, params, "application/json", bodyReader)
}

// NewPutApiNowTableTableNameSysIdRequestWithBody generates requests for PutApiNowTableTableNameSysId with any type of body
func NewPutApiNowTableTableNameSysIdRequestWithBody(server string, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableName", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sys_id", runtime.ParamLocationPath, sysId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/now/table/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SysparmDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_display_value", runtime.ParamLocationQuery, *params.SysparmDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmExcludeReferenceLink != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_exclude_reference_link", runtime.ParamLocationQuery, *params.SysparmExcludeReferenceLink); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_fields", runtime.ParamLocationQuery, *params.SysparmFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmInputDisplayValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_input_display_value", runtime.ParamLocationQuery, *params.SysparmInputDisplayValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmSuppressAutoSysField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_suppress_auto_sys_field", runtime.ParamLocationQuery, *params.SysparmSuppressAutoSysField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_view", runtime.ParamLocationQuery, *params.SysparmView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SysparmQueryNoDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sysparm_query_no_domain", runtime.ParamLocationQuery, *params.SysparmQueryNoDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiNowTableTableNameWithResponse request
	GetApiNowTableTableNameWithResponse(ctx context.Context, tableName interface{}, params *GetApiNowTableTableNameParams, reqEditors ...RequestEditorFn) (*GetApiNowTableTableNameResponse, error)

	// PostApiNowTableTableNameWithBodyWithResponse request with any body
	PostApiNowTableTableNameWithBodyWithResponse(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNowTableTableNameResponse, error)

	PostApiNowTableTableNameWithResponse(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, body PostApiNowTableTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNowTableTableNameResponse, error)

	// DeleteApiNowTableTableNameSysIdWithResponse request
	DeleteApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *DeleteApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*DeleteApiNowTableTableNameSysIdResponse, error)

	// GetApiNowTableTableNameSysIdWithResponse request
	GetApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *GetApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*GetApiNowTableTableNameSysIdResponse, error)

	// PatchApiNowTableTableNameSysIdWithBodyWithResponse request with any body
	PatchApiNowTableTableNameSysIdWithBodyWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiNowTableTableNameSysIdResponse, error)

	PatchApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, body PatchApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiNowTableTableNameSysIdResponse, error)

	// PutApiNowTableTableNameSysIdWithBodyWithResponse request with any body
	PutApiNowTableTableNameSysIdWithBodyWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiNowTableTableNameSysIdResponse, error)

	PutApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, body PutApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiNowTableTableNameSysIdResponse, error)
}

type GetApiNowTableTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiNowTableTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNowTableTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiNowTableTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiNowTableTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiNowTableTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiNowTableTableNameSysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiNowTableTableNameSysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiNowTableTableNameSysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNowTableTableNameSysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiNowTableTableNameSysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNowTableTableNameSysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiNowTableTableNameSysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiNowTableTableNameSysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiNowTableTableNameSysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiNowTableTableNameSysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiNowTableTableNameSysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiNowTableTableNameSysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiNowTableTableNameWithResponse request returning *GetApiNowTableTableNameResponse
func (c *ClientWithResponses) GetApiNowTableTableNameWithResponse(ctx context.Context, tableName interface{}, params *GetApiNowTableTableNameParams, reqEditors ...RequestEditorFn) (*GetApiNowTableTableNameResponse, error) {
	rsp, err := c.GetApiNowTableTableName(ctx, tableName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNowTableTableNameResponse(rsp)
}

// PostApiNowTableTableNameWithBodyWithResponse request with arbitrary body returning *PostApiNowTableTableNameResponse
func (c *ClientWithResponses) PostApiNowTableTableNameWithBodyWithResponse(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNowTableTableNameResponse, error) {
	rsp, err := c.PostApiNowTableTableNameWithBody(ctx, tableName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNowTableTableNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiNowTableTableNameWithResponse(ctx context.Context, tableName interface{}, params *PostApiNowTableTableNameParams, body PostApiNowTableTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNowTableTableNameResponse, error) {
	rsp, err := c.PostApiNowTableTableName(ctx, tableName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNowTableTableNameResponse(rsp)
}

// DeleteApiNowTableTableNameSysIdWithResponse request returning *DeleteApiNowTableTableNameSysIdResponse
func (c *ClientWithResponses) DeleteApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *DeleteApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*DeleteApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.DeleteApiNowTableTableNameSysId(ctx, tableName, sysId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiNowTableTableNameSysIdResponse(rsp)
}

// GetApiNowTableTableNameSysIdWithResponse request returning *GetApiNowTableTableNameSysIdResponse
func (c *ClientWithResponses) GetApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *GetApiNowTableTableNameSysIdParams, reqEditors ...RequestEditorFn) (*GetApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.GetApiNowTableTableNameSysId(ctx, tableName, sysId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNowTableTableNameSysIdResponse(rsp)
}

// PatchApiNowTableTableNameSysIdWithBodyWithResponse request with arbitrary body returning *PatchApiNowTableTableNameSysIdResponse
func (c *ClientWithResponses) PatchApiNowTableTableNameSysIdWithBodyWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.PatchApiNowTableTableNameSysIdWithBody(ctx, tableName, sysId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiNowTableTableNameSysIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PatchApiNowTableTableNameSysIdParams, body PatchApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.PatchApiNowTableTableNameSysId(ctx, tableName, sysId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiNowTableTableNameSysIdResponse(rsp)
}

// PutApiNowTableTableNameSysIdWithBodyWithResponse request with arbitrary body returning *PutApiNowTableTableNameSysIdResponse
func (c *ClientWithResponses) PutApiNowTableTableNameSysIdWithBodyWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.PutApiNowTableTableNameSysIdWithBody(ctx, tableName, sysId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiNowTableTableNameSysIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiNowTableTableNameSysIdWithResponse(ctx context.Context, tableName interface{}, sysId interface{}, params *PutApiNowTableTableNameSysIdParams, body PutApiNowTableTableNameSysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiNowTableTableNameSysIdResponse, error) {
	rsp, err := c.PutApiNowTableTableNameSysId(ctx, tableName, sysId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiNowTableTableNameSysIdResponse(rsp)
}

// ParseGetApiNowTableTableNameResponse parses an HTTP response from a GetApiNowTableTableNameWithResponse call
func ParseGetApiNowTableTableNameResponse(rsp *http.Response) (*GetApiNowTableTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNowTableTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiNowTableTableNameResponse parses an HTTP response from a PostApiNowTableTableNameWithResponse call
func ParsePostApiNowTableTableNameResponse(rsp *http.Response) (*PostApiNowTableTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiNowTableTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiNowTableTableNameSysIdResponse parses an HTTP response from a DeleteApiNowTableTableNameSysIdWithResponse call
func ParseDeleteApiNowTableTableNameSysIdResponse(rsp *http.Response) (*DeleteApiNowTableTableNameSysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiNowTableTableNameSysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiNowTableTableNameSysIdResponse parses an HTTP response from a GetApiNowTableTableNameSysIdWithResponse call
func ParseGetApiNowTableTableNameSysIdResponse(rsp *http.Response) (*GetApiNowTableTableNameSysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNowTableTableNameSysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiNowTableTableNameSysIdResponse parses an HTTP response from a PatchApiNowTableTableNameSysIdWithResponse call
func ParsePatchApiNowTableTableNameSysIdResponse(rsp *http.Response) (*PatchApiNowTableTableNameSysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiNowTableTableNameSysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiNowTableTableNameSysIdResponse parses an HTTP response from a PutApiNowTableTableNameSysIdWithResponse call
func ParsePutApiNowTableTableNameSysIdResponse(rsp *http.Response) (*PutApiNowTableTableNameSysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiNowTableTableNameSysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
