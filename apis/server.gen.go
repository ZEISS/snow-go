// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/url"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/now/table/{tableName})
	GetApiNowTableTableName(c *fiber.Ctx, tableName interface{}, params GetApiNowTableTableNameParams) error

	// (POST /api/now/table/{tableName})
	PostApiNowTableTableName(c *fiber.Ctx, tableName interface{}, params PostApiNowTableTableNameParams) error

	// (DELETE /api/now/table/{tableName}/{sys_id})
	DeleteApiNowTableTableNameSysId(c *fiber.Ctx, tableName interface{}, sysId interface{}, params DeleteApiNowTableTableNameSysIdParams) error

	// (GET /api/now/table/{tableName}/{sys_id})
	GetApiNowTableTableNameSysId(c *fiber.Ctx, tableName interface{}, sysId interface{}, params GetApiNowTableTableNameSysIdParams) error

	// (PATCH /api/now/table/{tableName}/{sys_id})
	PatchApiNowTableTableNameSysId(c *fiber.Ctx, tableName interface{}, sysId interface{}, params PatchApiNowTableTableNameSysIdParams) error

	// (PUT /api/now/table/{tableName}/{sys_id})
	PutApiNowTableTableNameSysId(c *fiber.Ctx, tableName interface{}, sysId interface{}, params PutApiNowTableTableNameSysIdParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetApiNowTableTableName operation middleware
func (siw *ServerInterfaceWrapper) GetApiNowTableTableName(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiNowTableTableNameParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query", query, &params.SysparmQuery)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_display_value", query, &params.SysparmDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_exclude_reference_link" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_exclude_reference_link", query, &params.SysparmExcludeReferenceLink)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_exclude_reference_link: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_suppress_pagination_header" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_suppress_pagination_header", query, &params.SysparmSuppressPaginationHeader)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_suppress_pagination_header: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_fields", query, &params.SysparmFields)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_fields: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_limit", query, &params.SysparmLimit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_limit: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_view" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_view", query, &params.SysparmView)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_view: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_category" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_category", query, &params.SysparmQueryCategory)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_category: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_no_domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_no_domain", query, &params.SysparmQueryNoDomain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_no_domain: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_no_count" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_no_count", query, &params.SysparmNoCount)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_no_count: %w", err).Error())
	}

	return siw.Handler.GetApiNowTableTableName(c, tableName, params)
}

// PostApiNowTableTableName operation middleware
func (siw *ServerInterfaceWrapper) PostApiNowTableTableName(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiNowTableTableNameParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_display_value", query, &params.SysparmDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_exclude_reference_link" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_exclude_reference_link", query, &params.SysparmExcludeReferenceLink)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_exclude_reference_link: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_fields", query, &params.SysparmFields)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_fields: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_input_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_input_display_value", query, &params.SysparmInputDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_input_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_suppress_auto_sys_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_suppress_auto_sys_field", query, &params.SysparmSuppressAutoSysField)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_suppress_auto_sys_field: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_view" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_view", query, &params.SysparmView)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_view: %w", err).Error())
	}

	return siw.Handler.PostApiNowTableTableName(c, tableName, params)
}

// DeleteApiNowTableTableNameSysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiNowTableTableNameSysId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// ------------- Path parameter "sys_id" -------------
	var sysId interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "sys_id", c.Params("sys_id"), &sysId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sys_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteApiNowTableTableNameSysIdParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_no_domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_no_domain", query, &params.SysparmQueryNoDomain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_no_domain: %w", err).Error())
	}

	return siw.Handler.DeleteApiNowTableTableNameSysId(c, tableName, sysId, params)
}

// GetApiNowTableTableNameSysId operation middleware
func (siw *ServerInterfaceWrapper) GetApiNowTableTableNameSysId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// ------------- Path parameter "sys_id" -------------
	var sysId interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "sys_id", c.Params("sys_id"), &sysId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sys_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiNowTableTableNameSysIdParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_display_value", query, &params.SysparmDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_exclude_reference_link" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_exclude_reference_link", query, &params.SysparmExcludeReferenceLink)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_exclude_reference_link: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_fields", query, &params.SysparmFields)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_fields: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_view" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_view", query, &params.SysparmView)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_view: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_no_domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_no_domain", query, &params.SysparmQueryNoDomain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_no_domain: %w", err).Error())
	}

	return siw.Handler.GetApiNowTableTableNameSysId(c, tableName, sysId, params)
}

// PatchApiNowTableTableNameSysId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiNowTableTableNameSysId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// ------------- Path parameter "sys_id" -------------
	var sysId interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "sys_id", c.Params("sys_id"), &sysId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sys_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchApiNowTableTableNameSysIdParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_display_value", query, &params.SysparmDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_exclude_reference_link" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_exclude_reference_link", query, &params.SysparmExcludeReferenceLink)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_exclude_reference_link: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_fields", query, &params.SysparmFields)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_fields: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_input_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_input_display_value", query, &params.SysparmInputDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_input_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_suppress_auto_sys_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_suppress_auto_sys_field", query, &params.SysparmSuppressAutoSysField)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_suppress_auto_sys_field: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_view" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_view", query, &params.SysparmView)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_view: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_no_domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_no_domain", query, &params.SysparmQueryNoDomain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_no_domain: %w", err).Error())
	}

	return siw.Handler.PatchApiNowTableTableNameSysId(c, tableName, sysId, params)
}

// PutApiNowTableTableNameSysId operation middleware
func (siw *ServerInterfaceWrapper) PutApiNowTableTableNameSysId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tableName" -------------
	var tableName interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "tableName", c.Params("tableName"), &tableName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tableName: %w", err).Error())
	}

	// ------------- Path parameter "sys_id" -------------
	var sysId interface{}

	err = runtime.BindStyledParameterWithOptions("simple", "sys_id", c.Params("sys_id"), &sysId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sys_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutApiNowTableTableNameSysIdParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_display_value", query, &params.SysparmDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_exclude_reference_link" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_exclude_reference_link", query, &params.SysparmExcludeReferenceLink)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_exclude_reference_link: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_fields", query, &params.SysparmFields)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_fields: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_input_display_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_input_display_value", query, &params.SysparmInputDisplayValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_input_display_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_suppress_auto_sys_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_suppress_auto_sys_field", query, &params.SysparmSuppressAutoSysField)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_suppress_auto_sys_field: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_view" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_view", query, &params.SysparmView)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_view: %w", err).Error())
	}

	// ------------- Optional query parameter "sysparm_query_no_domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "sysparm_query_no_domain", query, &params.SysparmQueryNoDomain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sysparm_query_no_domain: %w", err).Error())
	}

	return siw.Handler.PutApiNowTableTableNameSysId(c, tableName, sysId, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/api/now/table/:tableName", wrapper.GetApiNowTableTableName)

	router.Post(options.BaseURL+"/api/now/table/:tableName", wrapper.PostApiNowTableTableName)

	router.Delete(options.BaseURL+"/api/now/table/:tableName/:sys_id", wrapper.DeleteApiNowTableTableNameSysId)

	router.Get(options.BaseURL+"/api/now/table/:tableName/:sys_id", wrapper.GetApiNowTableTableNameSysId)

	router.Patch(options.BaseURL+"/api/now/table/:tableName/:sys_id", wrapper.PatchApiNowTableTableNameSysId)

	router.Put(options.BaseURL+"/api/now/table/:tableName/:sys_id", wrapper.PutApiNowTableTableNameSysId)

}

type GetApiNowTableTableNameRequestObject struct {
	TableName interface{} `json:"tableName"`
	Params    GetApiNowTableTableNameParams
}

type GetApiNowTableTableNameResponseObject interface {
	VisitGetApiNowTableTableNameResponse(ctx *fiber.Ctx) error
}

type GetApiNowTableTableName200JSONResponse interface{}

func (response GetApiNowTableTableName200JSONResponse) VisitGetApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiNowTableTableName200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetApiNowTableTableName200ApplicationxmlResponse) VisitGetApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type GetApiNowTableTableName200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetApiNowTableTableName200TextxmlResponse) VisitGetApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PostApiNowTableTableNameRequestObject struct {
	TableName interface{} `json:"tableName"`
	Params    PostApiNowTableTableNameParams
	JSONBody  *PostApiNowTableTableNameJSONRequestBody
	Body      io.Reader
	Body      io.Reader
}

type PostApiNowTableTableNameResponseObject interface {
	VisitPostApiNowTableTableNameResponse(ctx *fiber.Ctx) error
}

type PostApiNowTableTableName200JSONResponse interface{}

func (response PostApiNowTableTableName200JSONResponse) VisitPostApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostApiNowTableTableName200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostApiNowTableTableName200ApplicationxmlResponse) VisitPostApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PostApiNowTableTableName200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostApiNowTableTableName200TextxmlResponse) VisitPostApiNowTableTableNameResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type DeleteApiNowTableTableNameSysIdRequestObject struct {
	TableName interface{} `json:"tableName"`
	SysId     interface{} `json:"sys_id"`
	Params    DeleteApiNowTableTableNameSysIdParams
}

type DeleteApiNowTableTableNameSysIdResponseObject interface {
	VisitDeleteApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiNowTableTableNameSysId200JSONResponse interface{}

func (response DeleteApiNowTableTableNameSysId200JSONResponse) VisitDeleteApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type DeleteApiNowTableTableNameSysId200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DeleteApiNowTableTableNameSysId200ApplicationxmlResponse) VisitDeleteApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type DeleteApiNowTableTableNameSysId200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DeleteApiNowTableTableNameSysId200TextxmlResponse) VisitDeleteApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type GetApiNowTableTableNameSysIdRequestObject struct {
	TableName interface{} `json:"tableName"`
	SysId     interface{} `json:"sys_id"`
	Params    GetApiNowTableTableNameSysIdParams
}

type GetApiNowTableTableNameSysIdResponseObject interface {
	VisitGetApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error
}

type GetApiNowTableTableNameSysId200JSONResponse interface{}

func (response GetApiNowTableTableNameSysId200JSONResponse) VisitGetApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiNowTableTableNameSysId200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetApiNowTableTableNameSysId200ApplicationxmlResponse) VisitGetApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type GetApiNowTableTableNameSysId200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetApiNowTableTableNameSysId200TextxmlResponse) VisitGetApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PatchApiNowTableTableNameSysIdRequestObject struct {
	TableName interface{} `json:"tableName"`
	SysId     interface{} `json:"sys_id"`
	Params    PatchApiNowTableTableNameSysIdParams
	JSONBody  *PatchApiNowTableTableNameSysIdJSONRequestBody
	Body      io.Reader
	Body      io.Reader
}

type PatchApiNowTableTableNameSysIdResponseObject interface {
	VisitPatchApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error
}

type PatchApiNowTableTableNameSysId200JSONResponse interface{}

func (response PatchApiNowTableTableNameSysId200JSONResponse) VisitPatchApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PatchApiNowTableTableNameSysId200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PatchApiNowTableTableNameSysId200ApplicationxmlResponse) VisitPatchApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PatchApiNowTableTableNameSysId200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PatchApiNowTableTableNameSysId200TextxmlResponse) VisitPatchApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PutApiNowTableTableNameSysIdRequestObject struct {
	TableName interface{} `json:"tableName"`
	SysId     interface{} `json:"sys_id"`
	Params    PutApiNowTableTableNameSysIdParams
	JSONBody  *PutApiNowTableTableNameSysIdJSONRequestBody
	Body      io.Reader
	Body      io.Reader
}

type PutApiNowTableTableNameSysIdResponseObject interface {
	VisitPutApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error
}

type PutApiNowTableTableNameSysId200JSONResponse interface{}

func (response PutApiNowTableTableNameSysId200JSONResponse) VisitPutApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiNowTableTableNameSysId200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PutApiNowTableTableNameSysId200ApplicationxmlResponse) VisitPutApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type PutApiNowTableTableNameSysId200TextxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PutApiNowTableTableNameSysId200TextxmlResponse) VisitPutApiNowTableTableNameSysIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/now/table/{tableName})
	GetApiNowTableTableName(ctx context.Context, request GetApiNowTableTableNameRequestObject) (GetApiNowTableTableNameResponseObject, error)

	// (POST /api/now/table/{tableName})
	PostApiNowTableTableName(ctx context.Context, request PostApiNowTableTableNameRequestObject) (PostApiNowTableTableNameResponseObject, error)

	// (DELETE /api/now/table/{tableName}/{sys_id})
	DeleteApiNowTableTableNameSysId(ctx context.Context, request DeleteApiNowTableTableNameSysIdRequestObject) (DeleteApiNowTableTableNameSysIdResponseObject, error)

	// (GET /api/now/table/{tableName}/{sys_id})
	GetApiNowTableTableNameSysId(ctx context.Context, request GetApiNowTableTableNameSysIdRequestObject) (GetApiNowTableTableNameSysIdResponseObject, error)

	// (PATCH /api/now/table/{tableName}/{sys_id})
	PatchApiNowTableTableNameSysId(ctx context.Context, request PatchApiNowTableTableNameSysIdRequestObject) (PatchApiNowTableTableNameSysIdResponseObject, error)

	// (PUT /api/now/table/{tableName}/{sys_id})
	PutApiNowTableTableNameSysId(ctx context.Context, request PutApiNowTableTableNameSysIdRequestObject) (PutApiNowTableTableNameSysIdResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApiNowTableTableName operation middleware
func (sh *strictHandler) GetApiNowTableTableName(ctx *fiber.Ctx, tableName interface{}, params GetApiNowTableTableNameParams) error {
	var request GetApiNowTableTableNameRequestObject

	request.TableName = tableName
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiNowTableTableName(ctx.UserContext(), request.(GetApiNowTableTableNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiNowTableTableName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiNowTableTableNameResponseObject); ok {
		if err := validResponse.VisitGetApiNowTableTableNameResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiNowTableTableName operation middleware
func (sh *strictHandler) PostApiNowTableTableName(ctx *fiber.Ctx, tableName interface{}, params PostApiNowTableTableNameParams) error {
	var request PostApiNowTableTableNameRequestObject

	request.TableName = tableName
	request.Params = params
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/json") {

		var body PostApiNowTableTableNameJSONRequestBody
		if err := ctx.BodyParser(&body); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "text/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiNowTableTableName(ctx.UserContext(), request.(PostApiNowTableTableNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiNowTableTableName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiNowTableTableNameResponseObject); ok {
		if err := validResponse.VisitPostApiNowTableTableNameResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiNowTableTableNameSysId operation middleware
func (sh *strictHandler) DeleteApiNowTableTableNameSysId(ctx *fiber.Ctx, tableName interface{}, sysId interface{}, params DeleteApiNowTableTableNameSysIdParams) error {
	var request DeleteApiNowTableTableNameSysIdRequestObject

	request.TableName = tableName
	request.SysId = sysId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiNowTableTableNameSysId(ctx.UserContext(), request.(DeleteApiNowTableTableNameSysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiNowTableTableNameSysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiNowTableTableNameSysIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiNowTableTableNameSysIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiNowTableTableNameSysId operation middleware
func (sh *strictHandler) GetApiNowTableTableNameSysId(ctx *fiber.Ctx, tableName interface{}, sysId interface{}, params GetApiNowTableTableNameSysIdParams) error {
	var request GetApiNowTableTableNameSysIdRequestObject

	request.TableName = tableName
	request.SysId = sysId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiNowTableTableNameSysId(ctx.UserContext(), request.(GetApiNowTableTableNameSysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiNowTableTableNameSysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiNowTableTableNameSysIdResponseObject); ok {
		if err := validResponse.VisitGetApiNowTableTableNameSysIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchApiNowTableTableNameSysId operation middleware
func (sh *strictHandler) PatchApiNowTableTableNameSysId(ctx *fiber.Ctx, tableName interface{}, sysId interface{}, params PatchApiNowTableTableNameSysIdParams) error {
	var request PatchApiNowTableTableNameSysIdRequestObject

	request.TableName = tableName
	request.SysId = sysId
	request.Params = params
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/json") {

		var body PatchApiNowTableTableNameSysIdJSONRequestBody
		if err := ctx.BodyParser(&body); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "text/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PatchApiNowTableTableNameSysId(ctx.UserContext(), request.(PatchApiNowTableTableNameSysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchApiNowTableTableNameSysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PatchApiNowTableTableNameSysIdResponseObject); ok {
		if err := validResponse.VisitPatchApiNowTableTableNameSysIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiNowTableTableNameSysId operation middleware
func (sh *strictHandler) PutApiNowTableTableNameSysId(ctx *fiber.Ctx, tableName interface{}, sysId interface{}, params PutApiNowTableTableNameSysIdParams) error {
	var request PutApiNowTableTableNameSysIdRequestObject

	request.TableName = tableName
	request.SysId = sysId
	request.Params = params
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/json") {

		var body PutApiNowTableTableNameSysIdJSONRequestBody
		if err := ctx.BodyParser(&body); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "application/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}
	if strings.HasPrefix(string(ctx.Request().Header.ContentType()), "text/xml") {
		request.Body = bytes.NewReader(ctx.Request().Body())
	}

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiNowTableTableNameSysId(ctx.UserContext(), request.(PutApiNowTableTableNameSysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiNowTableTableNameSysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiNowTableTableNameSysIdResponseObject); ok {
		if err := validResponse.VisitPutApiNowTableTableNameSysIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
